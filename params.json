{
  "name": "Machine-learning",
  "tagline": "Projects relevant to machine learning and data science",
  "body": "# Machine Learning\r\n\r\n## About\r\nThis repository serves as a portfolio for the projects I completed for Udacity's Machine Learning Nanodegree by Google.\r\n\r\nLearn more on the wiki! https://github.com/hsherwoodcoombs/Machine-Learning/wiki\r\n\r\n## Material Covered\r\n1. Model Evaluation and Validation\r\n> Apply statistical analysis and tools to model observed data and gauge how well your models perform\r\n- Measure of central tendency\r\n\t- Veritability of data\r\n\t- Numpy & Pandas Tutorial\r\n\t- Scikit-learn tutorial\r\n\t- Evaluation metrics\r\n\t- Causes of error\r\n\t- Nature of data and model building\r\n\t- Training and testing\r\n\t- Cross validation\r\n\t- Representative Power of a Model\r\n\t- Learning Curves and Model Complexity\r\n**Project: Predicting Boston Housing Prices**\r\n\r\n2. Supervised Learning\r\n> Learn how Supervised Learning models such as Decision Trees, SVMs, Neural Networks, etc. are trained to model and predict labeled data.\r\n### Supervised Learning Tasks\r\n- Supervised learning background\r\n\t- Regression\r\n\t- Classification\r\n\r\n\t### Decision Trees\r\n\t- Neural Networks\r\n\t- Mini Project: **Build a perceptron**\r\n\r\n\t### Support Vector Machines\r\n\t- Kernel Methods & SVMs\r\n\t- SVM\r\n\r\n\t### Nonparametric Models\r\n\t- Instance Based Learning\r\n\r\n\t### Bayesian Methods\r\n\t- Naive Bayes\r\n\t- Bayesian Learning\r\n\t- Bayesian Inference\r\n\t- Bayes NLP Mini Project\r\n\r\n\t### Ensemble of Learners  \r\n\t- Ensemble B&B\r\n\r\n\t**Project: Building a Student Intervention System**\r\n\r\n3. Unsupervised Learning\r\n\t### Unsupervised Learning\r\n\t- Clustering\r\n\t- Feature Scaling\r\n\t- Feature Selection\r\n\t- PCA\r\n\r\n\t### Mini-Projects\r\n\t- Clustering mini-project\r\n\t- PCA mini-project\r\n\r\n\t**Project: Creating Customer Segments**\r\n\t- Naive Bayes Classifier\r\n\t- Support Vector Machines\r\n\t- Decision Trees\r\n\r\n4. Reinforcement Learning\r\n> Use Reinforcement Learning algorithms like Q-Learning to train artificial agents to take optimal actions in an environment.\r\n### Markov Decision Processes\r\n- Introduction to reinforcement learning\r\n\t- Markov decision processes (MVPs)\r\n\t- Game theory\r\n\r\n\t**Project: Train a smart cab to drive** \r\n\r\n## Software Requirements\r\n\r\nThis project requires Python 2.7 and the following Python libraries installed:\r\n\r\nNumPy\r\nPandas\r\nmatplotlib\r\nscikit-learn\r\nYou will also need to have software installed to run and execute an iPython Notebook\r\n\r\nUdacity recommends our students install Anaconda, a pre-packaged Python distribution that contains all of the necessary libraries and software for this project.\r\n\r\n\r\nThis will open the iPython Notebook software and project file in your browser.\r\n\r\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>. Please refer to [Udacity Terms of Service][1] for further information.\r\n\r\n[1]:\thttps://www.udacity.com/legal",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}